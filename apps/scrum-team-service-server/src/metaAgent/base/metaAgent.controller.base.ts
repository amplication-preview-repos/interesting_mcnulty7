/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MetaAgentService } from "../metaAgent.service";
import { MetaAgentCreateInput } from "./MetaAgentCreateInput";
import { MetaAgent } from "./MetaAgent";
import { MetaAgentFindManyArgs } from "./MetaAgentFindManyArgs";
import { MetaAgentWhereUniqueInput } from "./MetaAgentWhereUniqueInput";
import { MetaAgentUpdateInput } from "./MetaAgentUpdateInput";

export class MetaAgentControllerBase {
  constructor(protected readonly service: MetaAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MetaAgent })
  async createMetaAgent(
    @common.Body() data: MetaAgentCreateInput
  ): Promise<MetaAgent> {
    return await this.service.createMetaAgent({
      data: data,
      select: {
        capabilities: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MetaAgent] })
  @ApiNestedQuery(MetaAgentFindManyArgs)
  async metaAgents(@common.Req() request: Request): Promise<MetaAgent[]> {
    const args = plainToClass(MetaAgentFindManyArgs, request.query);
    return this.service.metaAgents({
      ...args,
      select: {
        capabilities: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MetaAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async metaAgent(
    @common.Param() params: MetaAgentWhereUniqueInput
  ): Promise<MetaAgent | null> {
    const result = await this.service.metaAgent({
      where: params,
      select: {
        capabilities: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MetaAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMetaAgent(
    @common.Param() params: MetaAgentWhereUniqueInput,
    @common.Body() data: MetaAgentUpdateInput
  ): Promise<MetaAgent | null> {
    try {
      return await this.service.updateMetaAgent({
        where: params,
        data: data,
        select: {
          capabilities: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MetaAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMetaAgent(
    @common.Param() params: MetaAgentWhereUniqueInput
  ): Promise<MetaAgent | null> {
    try {
      return await this.service.deleteMetaAgent({
        where: params,
        select: {
          capabilities: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
