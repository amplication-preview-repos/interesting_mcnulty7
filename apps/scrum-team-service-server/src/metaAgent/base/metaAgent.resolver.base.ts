/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MetaAgent } from "./MetaAgent";
import { MetaAgentCountArgs } from "./MetaAgentCountArgs";
import { MetaAgentFindManyArgs } from "./MetaAgentFindManyArgs";
import { MetaAgentFindUniqueArgs } from "./MetaAgentFindUniqueArgs";
import { CreateMetaAgentArgs } from "./CreateMetaAgentArgs";
import { UpdateMetaAgentArgs } from "./UpdateMetaAgentArgs";
import { DeleteMetaAgentArgs } from "./DeleteMetaAgentArgs";
import { MetaAgentService } from "../metaAgent.service";
@graphql.Resolver(() => MetaAgent)
export class MetaAgentResolverBase {
  constructor(protected readonly service: MetaAgentService) {}

  async _metaAgentsMeta(
    @graphql.Args() args: MetaAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MetaAgent])
  async metaAgents(
    @graphql.Args() args: MetaAgentFindManyArgs
  ): Promise<MetaAgent[]> {
    return this.service.metaAgents(args);
  }

  @graphql.Query(() => MetaAgent, { nullable: true })
  async metaAgent(
    @graphql.Args() args: MetaAgentFindUniqueArgs
  ): Promise<MetaAgent | null> {
    const result = await this.service.metaAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MetaAgent)
  async createMetaAgent(
    @graphql.Args() args: CreateMetaAgentArgs
  ): Promise<MetaAgent> {
    return await this.service.createMetaAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MetaAgent)
  async updateMetaAgent(
    @graphql.Args() args: UpdateMetaAgentArgs
  ): Promise<MetaAgent | null> {
    try {
      return await this.service.updateMetaAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MetaAgent)
  async deleteMetaAgent(
    @graphql.Args() args: DeleteMetaAgentArgs
  ): Promise<MetaAgent | null> {
    try {
      return await this.service.deleteMetaAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
