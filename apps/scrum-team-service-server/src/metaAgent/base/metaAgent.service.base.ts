/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MetaAgent as PrismaMetaAgent } from "@prisma/client";

export class MetaAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MetaAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.metaAgent.count(args);
  }

  async metaAgents(
    args: Prisma.MetaAgentFindManyArgs
  ): Promise<PrismaMetaAgent[]> {
    return this.prisma.metaAgent.findMany(args);
  }
  async metaAgent(
    args: Prisma.MetaAgentFindUniqueArgs
  ): Promise<PrismaMetaAgent | null> {
    return this.prisma.metaAgent.findUnique(args);
  }
  async createMetaAgent(
    args: Prisma.MetaAgentCreateArgs
  ): Promise<PrismaMetaAgent> {
    return this.prisma.metaAgent.create(args);
  }
  async updateMetaAgent(
    args: Prisma.MetaAgentUpdateArgs
  ): Promise<PrismaMetaAgent> {
    return this.prisma.metaAgent.update(args);
  }
  async deleteMetaAgent(
    args: Prisma.MetaAgentDeleteArgs
  ): Promise<PrismaMetaAgent> {
    return this.prisma.metaAgent.delete(args);
  }
}
