/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DeveloperAgent as PrismaDeveloperAgent } from "@prisma/client";

export class DeveloperAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeveloperAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.developerAgent.count(args);
  }

  async developerAgents(
    args: Prisma.DeveloperAgentFindManyArgs
  ): Promise<PrismaDeveloperAgent[]> {
    return this.prisma.developerAgent.findMany(args);
  }
  async developerAgent(
    args: Prisma.DeveloperAgentFindUniqueArgs
  ): Promise<PrismaDeveloperAgent | null> {
    return this.prisma.developerAgent.findUnique(args);
  }
  async createDeveloperAgent(
    args: Prisma.DeveloperAgentCreateArgs
  ): Promise<PrismaDeveloperAgent> {
    return this.prisma.developerAgent.create(args);
  }
  async updateDeveloperAgent(
    args: Prisma.DeveloperAgentUpdateArgs
  ): Promise<PrismaDeveloperAgent> {
    return this.prisma.developerAgent.update(args);
  }
  async deleteDeveloperAgent(
    args: Prisma.DeveloperAgentDeleteArgs
  ): Promise<PrismaDeveloperAgent> {
    return this.prisma.developerAgent.delete(args);
  }
}
