/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeveloperAgentService } from "../developerAgent.service";
import { DeveloperAgentCreateInput } from "./DeveloperAgentCreateInput";
import { DeveloperAgent } from "./DeveloperAgent";
import { DeveloperAgentFindManyArgs } from "./DeveloperAgentFindManyArgs";
import { DeveloperAgentWhereUniqueInput } from "./DeveloperAgentWhereUniqueInput";
import { DeveloperAgentUpdateInput } from "./DeveloperAgentUpdateInput";

export class DeveloperAgentControllerBase {
  constructor(protected readonly service: DeveloperAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeveloperAgent })
  async createDeveloperAgent(
    @common.Body() data: DeveloperAgentCreateInput
  ): Promise<DeveloperAgent> {
    return await this.service.createDeveloperAgent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeveloperAgent] })
  @ApiNestedQuery(DeveloperAgentFindManyArgs)
  async developerAgents(
    @common.Req() request: Request
  ): Promise<DeveloperAgent[]> {
    const args = plainToClass(DeveloperAgentFindManyArgs, request.query);
    return this.service.developerAgents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeveloperAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async developerAgent(
    @common.Param() params: DeveloperAgentWhereUniqueInput
  ): Promise<DeveloperAgent | null> {
    const result = await this.service.developerAgent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeveloperAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeveloperAgent(
    @common.Param() params: DeveloperAgentWhereUniqueInput,
    @common.Body() data: DeveloperAgentUpdateInput
  ): Promise<DeveloperAgent | null> {
    try {
      return await this.service.updateDeveloperAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeveloperAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeveloperAgent(
    @common.Param() params: DeveloperAgentWhereUniqueInput
  ): Promise<DeveloperAgent | null> {
    try {
      return await this.service.deleteDeveloperAgent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
