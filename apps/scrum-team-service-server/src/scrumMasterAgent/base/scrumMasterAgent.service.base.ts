/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ScrumMasterAgent as PrismaScrumMasterAgent,
} from "@prisma/client";

export class ScrumMasterAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScrumMasterAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scrumMasterAgent.count(args);
  }

  async scrumMasterAgents(
    args: Prisma.ScrumMasterAgentFindManyArgs
  ): Promise<PrismaScrumMasterAgent[]> {
    return this.prisma.scrumMasterAgent.findMany(args);
  }
  async scrumMasterAgent(
    args: Prisma.ScrumMasterAgentFindUniqueArgs
  ): Promise<PrismaScrumMasterAgent | null> {
    return this.prisma.scrumMasterAgent.findUnique(args);
  }
  async createScrumMasterAgent(
    args: Prisma.ScrumMasterAgentCreateArgs
  ): Promise<PrismaScrumMasterAgent> {
    return this.prisma.scrumMasterAgent.create(args);
  }
  async updateScrumMasterAgent(
    args: Prisma.ScrumMasterAgentUpdateArgs
  ): Promise<PrismaScrumMasterAgent> {
    return this.prisma.scrumMasterAgent.update(args);
  }
  async deleteScrumMasterAgent(
    args: Prisma.ScrumMasterAgentDeleteArgs
  ): Promise<PrismaScrumMasterAgent> {
    return this.prisma.scrumMasterAgent.delete(args);
  }
}
