/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScrumMasterAgentService } from "../scrumMasterAgent.service";
import { ScrumMasterAgentCreateInput } from "./ScrumMasterAgentCreateInput";
import { ScrumMasterAgent } from "./ScrumMasterAgent";
import { ScrumMasterAgentFindManyArgs } from "./ScrumMasterAgentFindManyArgs";
import { ScrumMasterAgentWhereUniqueInput } from "./ScrumMasterAgentWhereUniqueInput";
import { ScrumMasterAgentUpdateInput } from "./ScrumMasterAgentUpdateInput";

export class ScrumMasterAgentControllerBase {
  constructor(protected readonly service: ScrumMasterAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScrumMasterAgent })
  async createScrumMasterAgent(
    @common.Body() data: ScrumMasterAgentCreateInput
  ): Promise<ScrumMasterAgent> {
    return await this.service.createScrumMasterAgent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScrumMasterAgent] })
  @ApiNestedQuery(ScrumMasterAgentFindManyArgs)
  async scrumMasterAgents(
    @common.Req() request: Request
  ): Promise<ScrumMasterAgent[]> {
    const args = plainToClass(ScrumMasterAgentFindManyArgs, request.query);
    return this.service.scrumMasterAgents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScrumMasterAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scrumMasterAgent(
    @common.Param() params: ScrumMasterAgentWhereUniqueInput
  ): Promise<ScrumMasterAgent | null> {
    const result = await this.service.scrumMasterAgent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScrumMasterAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScrumMasterAgent(
    @common.Param() params: ScrumMasterAgentWhereUniqueInput,
    @common.Body() data: ScrumMasterAgentUpdateInput
  ): Promise<ScrumMasterAgent | null> {
    try {
      return await this.service.updateScrumMasterAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScrumMasterAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScrumMasterAgent(
    @common.Param() params: ScrumMasterAgentWhereUniqueInput
  ): Promise<ScrumMasterAgent | null> {
    try {
      return await this.service.deleteScrumMasterAgent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
