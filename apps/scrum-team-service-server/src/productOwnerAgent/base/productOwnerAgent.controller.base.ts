/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductOwnerAgentService } from "../productOwnerAgent.service";
import { ProductOwnerAgentCreateInput } from "./ProductOwnerAgentCreateInput";
import { ProductOwnerAgent } from "./ProductOwnerAgent";
import { ProductOwnerAgentFindManyArgs } from "./ProductOwnerAgentFindManyArgs";
import { ProductOwnerAgentWhereUniqueInput } from "./ProductOwnerAgentWhereUniqueInput";
import { ProductOwnerAgentUpdateInput } from "./ProductOwnerAgentUpdateInput";

export class ProductOwnerAgentControllerBase {
  constructor(protected readonly service: ProductOwnerAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductOwnerAgent })
  async createProductOwnerAgent(
    @common.Body() data: ProductOwnerAgentCreateInput
  ): Promise<ProductOwnerAgent> {
    return await this.service.createProductOwnerAgent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductOwnerAgent] })
  @ApiNestedQuery(ProductOwnerAgentFindManyArgs)
  async productOwnerAgents(
    @common.Req() request: Request
  ): Promise<ProductOwnerAgent[]> {
    const args = plainToClass(ProductOwnerAgentFindManyArgs, request.query);
    return this.service.productOwnerAgents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductOwnerAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productOwnerAgent(
    @common.Param() params: ProductOwnerAgentWhereUniqueInput
  ): Promise<ProductOwnerAgent | null> {
    const result = await this.service.productOwnerAgent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductOwnerAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductOwnerAgent(
    @common.Param() params: ProductOwnerAgentWhereUniqueInput,
    @common.Body() data: ProductOwnerAgentUpdateInput
  ): Promise<ProductOwnerAgent | null> {
    try {
      return await this.service.updateProductOwnerAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductOwnerAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductOwnerAgent(
    @common.Param() params: ProductOwnerAgentWhereUniqueInput
  ): Promise<ProductOwnerAgent | null> {
    try {
      return await this.service.deleteProductOwnerAgent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
