/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductOwnerAgent } from "./ProductOwnerAgent";
import { ProductOwnerAgentCountArgs } from "./ProductOwnerAgentCountArgs";
import { ProductOwnerAgentFindManyArgs } from "./ProductOwnerAgentFindManyArgs";
import { ProductOwnerAgentFindUniqueArgs } from "./ProductOwnerAgentFindUniqueArgs";
import { DeleteProductOwnerAgentArgs } from "./DeleteProductOwnerAgentArgs";
import { ProductOwnerAgentService } from "../productOwnerAgent.service";
@graphql.Resolver(() => ProductOwnerAgent)
export class ProductOwnerAgentResolverBase {
  constructor(protected readonly service: ProductOwnerAgentService) {}

  async _productOwnerAgentsMeta(
    @graphql.Args() args: ProductOwnerAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductOwnerAgent])
  async productOwnerAgents(
    @graphql.Args() args: ProductOwnerAgentFindManyArgs
  ): Promise<ProductOwnerAgent[]> {
    return this.service.productOwnerAgents(args);
  }

  @graphql.Query(() => ProductOwnerAgent, { nullable: true })
  async productOwnerAgent(
    @graphql.Args() args: ProductOwnerAgentFindUniqueArgs
  ): Promise<ProductOwnerAgent | null> {
    const result = await this.service.productOwnerAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductOwnerAgent)
  async deleteProductOwnerAgent(
    @graphql.Args() args: DeleteProductOwnerAgentArgs
  ): Promise<ProductOwnerAgent | null> {
    try {
      return await this.service.deleteProductOwnerAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
