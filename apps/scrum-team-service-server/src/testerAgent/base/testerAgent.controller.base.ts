/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TesterAgentService } from "../testerAgent.service";
import { TesterAgentCreateInput } from "./TesterAgentCreateInput";
import { TesterAgent } from "./TesterAgent";
import { TesterAgentFindManyArgs } from "./TesterAgentFindManyArgs";
import { TesterAgentWhereUniqueInput } from "./TesterAgentWhereUniqueInput";
import { TesterAgentUpdateInput } from "./TesterAgentUpdateInput";

export class TesterAgentControllerBase {
  constructor(protected readonly service: TesterAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TesterAgent })
  async createTesterAgent(
    @common.Body() data: TesterAgentCreateInput
  ): Promise<TesterAgent> {
    return await this.service.createTesterAgent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TesterAgent] })
  @ApiNestedQuery(TesterAgentFindManyArgs)
  async testerAgents(@common.Req() request: Request): Promise<TesterAgent[]> {
    const args = plainToClass(TesterAgentFindManyArgs, request.query);
    return this.service.testerAgents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TesterAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testerAgent(
    @common.Param() params: TesterAgentWhereUniqueInput
  ): Promise<TesterAgent | null> {
    const result = await this.service.testerAgent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TesterAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTesterAgent(
    @common.Param() params: TesterAgentWhereUniqueInput,
    @common.Body() data: TesterAgentUpdateInput
  ): Promise<TesterAgent | null> {
    try {
      return await this.service.updateTesterAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TesterAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTesterAgent(
    @common.Param() params: TesterAgentWhereUniqueInput
  ): Promise<TesterAgent | null> {
    try {
      return await this.service.deleteTesterAgent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
