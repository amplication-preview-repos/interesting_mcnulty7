/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TesterAgent as PrismaTesterAgent } from "@prisma/client";

export class TesterAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TesterAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.testerAgent.count(args);
  }

  async testerAgents(
    args: Prisma.TesterAgentFindManyArgs
  ): Promise<PrismaTesterAgent[]> {
    return this.prisma.testerAgent.findMany(args);
  }
  async testerAgent(
    args: Prisma.TesterAgentFindUniqueArgs
  ): Promise<PrismaTesterAgent | null> {
    return this.prisma.testerAgent.findUnique(args);
  }
  async createTesterAgent(
    args: Prisma.TesterAgentCreateArgs
  ): Promise<PrismaTesterAgent> {
    return this.prisma.testerAgent.create(args);
  }
  async updateTesterAgent(
    args: Prisma.TesterAgentUpdateArgs
  ): Promise<PrismaTesterAgent> {
    return this.prisma.testerAgent.update(args);
  }
  async deleteTesterAgent(
    args: Prisma.TesterAgentDeleteArgs
  ): Promise<PrismaTesterAgent> {
    return this.prisma.testerAgent.delete(args);
  }
}
